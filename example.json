{
  "openapi": "3.0.3",
  "info": {
    "title": "Multitenant Access Control - Service API - Public",
    "version": "v1",
    "description": "This is the public API description of Multitenant Access Control.\nIt includes endpoints for service monitoring, access and authorization management, user and groups management, roles and resources management and application on/offboarding",
    "contact": {
      "name": "Bosch Connected Industry",
      "url": "https://www.bosch-connected-industry.com",
      "email": "Industry4.0.bci@de.bosch.com"
    },
    "termsOfService": "https://www.bosch-connected-industry.com/de/en/legal-notice",
    "license": {
      "url": "https://www.bosch-connected-industry.com/de/en/corporate-information",
      "name": "Â© Robert Bosch Manufacturing Solutions GmbH 2023, all rights reserved"
    }
  },
  "servers": [
    {
      "url": "https://{module domain}/iam",
      "variables": {
        "Module domain": {
          "default": "portal.bosch-nexeed.com",
          "description": "The module's domain in your environment can be found in the module list in the access management section."
        }
      },
      "description": "Multitenant Access Control"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Return the application's current health status",
        "description": "Returns the application's current health status.\n",
        "operationId": "GetHealthStatus",
        "parameters": [
          {
            "name": "com.bosch.correlationId",
            "in": "header",
            "description": "Header for correlation of related requests.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "description": "Header for accepted MIME type.",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The current health status. 200 is always returned, check response body for the status.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "name",
                    "instanceId",
                    "version",
                    "ready",
                    "health"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Multitenant Access Control - Webapp - Backend"
                    },
                    "description": {
                      "type": "string",
                      "example": "Multitenant Access Control Webapp Backend implementation that also aggregates Frontend."
                    },
                    "instanceId": {
                      "type": "string",
                      "example": "instance-id"
                    },
                    "startupTime": {
                      "type": "string",
                      "example": "2022-09-27T12:53:09.1546536+00:00"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.20.0"
                    },
                    "ready": {
                      "type": "boolean",
                      "example": true
                    },
                    "health": {
                      "type": "string",
                      "enum": [
                        "HEALTHY",
                        "UNHEALTHY"
                      ],
                      "example": "HEALTHY"
                    },
                    "onStateSince": {
                      "type": "string",
                      "example": "2022-09-27:14:30:58"
                    },
                    "details": {
                      "type": "object"
                    },
                    "dependencies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "available"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Core"
                          },
                          "url": {
                            "type": "string",
                            "example": "https://macma-core-service"
                          },
                          "description": {
                            "type": "string",
                            "example": "Service for tenant authorization including data sharing."
                          },
                          "available": {
                            "type": "boolean",
                            "example": true
                          },
                          "details": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden.\n"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Ping",
        "description": "Ping.\n",
        "operationId": "Ping",
        "parameters": [
          {
            "name": "com.bosch.correlationId",
            "in": "header",
            "description": "Header for correlation of related requests.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "description": "Header for accepted MIME type.",
            "schema": {
              "type": "string",
              "example": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The service can be connected from a client process perspective\n",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "UP"
                      ],
                      "example": "UP"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access-management/v1/openid-connect/userinfo": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect UserInfo Endpoint",
        "description": "Request user info at the OpenID UserInfo Endpoint (https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).",
        "operationId": "OpenIDConnectUserInfo(get)",
        "responses": {
          "200": {
            "description": "Information about the authenticated user. The result may contain additional fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                },
                "example": {
                  "error": "Invalid content. Object has missing required properties ([{property1},{property2}])"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication. For more details see WWW-Authenticate Response Header Field (https://datatracker.ietf.org/doc/html/rfc6750#section-3)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request was denied. For more details see WWW-Authenticate Response Header Field (https://datatracker.ietf.org/doc/html/rfc6750#section-3)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect UserInfo Endpoint",
        "description": "Request user info at the OpenID UserInfo Endpoint (https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).",
        "operationId": "OpenIDConnectUserInfo(post)",
        "responses": {
          "200": {
            "description": "Information about the authenticated user. The result may contain additional fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                },
                "example": {
                  "error": "Invalid content. Object has missing required properties ([{property1},{property2}])"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication. For more details see WWW-Authenticate Response Header Field (https://datatracker.ietf.org/doc/html/rfc6750#section-3)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request was denied. For more details see WWW-Authenticate Response Header Field (https://datatracker.ietf.org/doc/html/rfc6750#section-3)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/access-management/v1/openid-connect/introspect": {
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect Token Introspect Endpoint",
        "description": "Request info about a OpenID Connect Token issued by MACMA. For further details see https://tools.ietf.org/html/rfc7662.",
        "operationId": "OpenIDConnectTokenIntrospect",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Token issued by MACMA."
                  },
                  "token_type_hint": {
                    "type": "string",
                    "description": "The type of the token."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information about the token. The result may contain additional fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Introspect"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                },
                "example": {
                  "error": "Invalid content. Object has missing required properties ([{property1},{property2}])"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthOIDCErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "basicAuthOauth2": []
          }
        ]
      }
    },
    "/access-management/v1/application/acl": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Read the ACL (Access Control List) for all resources registered for the given application",
        "operationId": "ReadApplicationsACL",
        "responses": {
          "200": {
            "description": "ACL for given application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Acl"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "description": "returns the ACL of application"
      }
    },
    "/access-management/v1/user/acl": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Read the ACL (Access Control List) for the given user",
        "operationId": "ReadUsersACL",
        "parameters": [
          {
            "name": "includeDynamicResources",
            "in": "query",
            "description": "Set to true if dynamic resources should be included in the User ACL response. Defaults to false if not specified.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ACL for given user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Acl"
                }
              }
            }
          },
          "304": {
            "description": "Not modified"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "description": "returns the ACL of user"
      }
    },
    "/tenant-management/v1/tenants/{tenantId}/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Read all tenants, to whom the current tenant has a relation",
        "operationId": "ReadTenants",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "checkOutgoingContracts",
            "in": "query",
            "description": "Whether to check for outgoing contracts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantsRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "description": "reads all tenant list"
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create tenant",
        "description": "This endpoint is used to create a new tenant with an admin user. The credentials of the admin user have to be specified via \"username\" and \"password\".\nThe password requires at least ten characters including one digit, one lower case letter, one capital letter and one special character.\nIt is temporary and has to be changed on first login.\nThe id (uuid) for the tenant can be passed. If not present, a random one is generated. Ids must be unique and never have been used before (including deleted tenants).\n",
        "operationId": "CreateTenant",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The id of the created tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantReadResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/NamingConflictError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          }
        },
        "x-codegen-request-body-name": "tenant"
      }
    },
    "/tenant-management/v1/tenants/{tenantId}/tenants/{tenantToDeleteId}": {
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a tenant",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "tenantToDeleteId",
            "in": "path",
            "description": "Id of the tenant to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, tenant deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "tenantToDeleteId": "acceptingTenantId"
          }
        }
      }
    },
    "/contract-management/v1/tenants/{tenantId}/contracts": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Create a contract",
        "operationId": "CreateContract",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Id of the contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/NamingConflictError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          }
        },
        "x-codegen-request-body-name": "contract"
      }
    },
    "/application-management/v1/tenants/{tenantId}/applications": {
      "get": {
        "tags": [
          "Application Management"
        ],
        "summary": "Read applications",
        "description": "Returns a list of all available applications",
        "operationId": "ReadApplications",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call (pageSize, default 100).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A String contained in the id, name or description.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Register an application",
        "description": "Register an application in a software provider tenant, receiving clientIDs and credentials in return.",
        "operationId": "RegisterApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Client Ids and credentials for the registered the application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/NamingConflictError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-codegen-request-body-name": "application"
      }
    },
    "/application-management/v1/tenants/{tenantId}/applications/{applicationId}": {
      "get": {
        "tags": [
          "Application Management"
        ],
        "summary": "Read application",
        "description": "Returns information about a certain application",
        "operationId": "ReadApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "put": {
        "tags": [
          "Application Management"
        ],
        "summary": "Update application",
        "description": "Update information about a certain application",
        "operationId": "UpdateApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-codegen-request-body-name": "application"
      },
      "delete": {
        "tags": [
          "Application Management"
        ],
        "summary": "Delete an application that is not shared.",
        "description": "Trying to delete an application that is still shared will return 422 (Unprocessable Entity).",
        "operationId": "DeleteApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, application deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "replacedBy": "com.bosch.bci.auth.macma.core.applications.controller.ApplicationControllerDeleteIT"
        }
      }
    },
    "/application-management/v1/tenants/{tenantId}/applications/{applicationId}/secret": {
      "put": {
        "tags": [
          "Application Management"
        ],
        "summary": "Change client secret.",
        "description": "<b>WARNING</b></br> It is not sufficient to change the client secret by this endpoint. It is crucial to adapt the application configuration accordingly with the new secret. Otherwise the modules will not be able to login anymore.",
        "operationId": "ChangeClientSecret",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationClientSecretUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content, secret changed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/application-management/v1/tenants/{tenantId}/applications/{applicationId}/authorization/roles/assigned": {
      "get": {
        "tags": [
          "Application Management"
        ],
        "summary": "Read application and tenant roles assigned to an application",
        "description": "Returns the list of roles assigned to an application",
        "operationId": "ReadApplicationAndTenantRolesAssignedToAnApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A String contained in role name, display name or description.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call (pageSize, default 100).",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of application and tenant roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRoles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/application-management/v1/tenants/{tenantId}/applications/{applicationId}/authorization/roles/{roleId}": {
      "put": {
        "tags": [
          "Application Management"
        ],
        "summary": "Assign a role to an application",
        "description": "Assign a role to an application, thus granting it permissions.",
        "operationId": "AssignRoleToApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, role assigned to application"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Management"
        ],
        "summary": "Unassign a role from an application",
        "operationId": "UnassignRoleFromApplication",
        "description": "Unassign a role from an application, thus withdraw permissions from it.",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, role unassigned from application"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/application-management-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources": {
      "get": {
        "tags": [
          "Static Resource"
        ],
        "summary": "Get all static resources of the specified application of its owning tenant",
        "description": "Returns only static resources in the given tenant IFF the caller is the application itself AND the given tenant is the software providing tenant of that application",
        "operationId": "GetAllStaticResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of resources.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        }
      }
    },
    "/application-management-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources/create-or-update": {
      "post": {
        "tags": [
          "Static Resource"
        ],
        "summary": "Create or update static resources",
        "description": "This endpoint is used to register new and update existing static resources. When creating static resources, MACMA does not provide ids. E.g. ids from the body payload are just representation of the ids within the application. Therefore, uniqueness of resources in MACMA is established by combining <b>tenantId (path-parameter)</b>, <b>applicationId (path-parameter)</b>, <b>id (payload)</b> and the <b>type (payload)</b>. Each array element represents a single resource so that it's possible to register multiple resources. When using the endpoint consider the following limitations: <ul> <li>The BearerToken used for calling this endpoint needs to be valid for the software providing tenant</li> <li>Max 100 resources per request allowed</li> <li>The request fails if one of the resources already exists</li> <li>The request fails if one of the resource ids is equal (case insensitive) to an id of an existing resource of the same type</li> <li>The request fails if one of the resource types equals the type of a dynamic resource</li> <li>As there is no rollback implemented the caller is responsible for the cleanup</li> <li>Resources need to have at least one privilege</li> </ul>",
        "operationId": "RegisterStaticResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourcesCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkResponseOK"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/BulkResponseUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "resources"
      }
    },
    "/application-management-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources/delete": {
      "post": {
        "tags": [
          "Static Resource"
        ],
        "summary": "Delete static resources",
        "description": "This endpoint is used to delete static resources. Each array element represents a single static resource so that it's possible to delete multiple application roles. The ids from the body payload are just representation of the ids within the application.",
        "operationId": "DeleteExistingStaticResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourcesDeletion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkResponseOK"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/BulkResponseUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "resources"
      }
    },
    "/dynamic-resources-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources": {
      "get": {
        "tags": [
          "Dynamic Resource"
        ],
        "summary": "Get dynamic resources belonging to the given tenant and application",
        "description": "Returns dynamic resources belonging to the given tenant and application, IFF the caller is the application itself.",
        "operationId": "GetAllDynamicResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of resources.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        }
      }
    },
    "/dynamic-resources-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources/create": {
      "post": {
        "tags": [
          "Dynamic Resource"
        ],
        "summary": "Create dynamic resources",
        "description": "This endpoint is used to register new dynamic resources. When creating new dynamic resources, MACMA does not provide ids. E.g. ids from the body payload are just representation of the ids within the application. Therefore, uniqueness of dynamic resources in MACMA is established by combining <b>tenantId (path-parameter)</b>, <b>applicationId (path-parameter)</b>, <b>id (payload)</b> and the <b>type (payload)</b>. Each array element represents a single resource so that it is possible to register multiple resources.<br><br> When using the endpoint consider the following limitations: <ul> <li>The BearerToken used for calling this endpoint needs to be valid for the tenant where the dynamic resources will be created</li> <li>Max 100 dynamic resources per request allowed</li> <li>Dynamic resources can only be assigned to tenant roles</li> <li>Dynamic resources can only be created by the own application</li> <li>Resources need to have at least one privilege</li> <li>The resource <b>id</b>, <b>type</b> and <b>name</b> are case sensitive</li> <li>Bulk failure mode is undefined: the implementation may either create as many resources as possible or none at all if any of them fails - do not depend on this. Only the result code(s) will specify what has been done</li> </ul>",
        "operationId": "RegisterNewDynamicResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourcesCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/BulkResponseCreated"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BulkResponseBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/BulkResponseNotFound"
          },
          "409": {
            "$ref": "#/components/responses/BulkResponseConflict"
          },
          "500": {
            "$ref": "#/components/responses/BulkResponseInternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "resources"
      }
    },
    "/dynamic-resources-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources/update": {
      "post": {
        "tags": [
          "Dynamic Resource"
        ],
        "summary": "Update dynamic resources",
        "description": "This endpoint is used to update dynamic resources.<br><br> When using the endpoint consider the following limitations: <ul> <li>The BearerToken used for calling this endpoint needs to be valid for the tenant where the dynamic resources will be updated</li> <li>Max 100 dynamic resources per request allowed</li> <li>Resources need to have at least one privilege</li> <li>The resource <b>id</b>, <b>type</b> and <b>name</b> are case sensitive</li> <li>Dynamic resources can only be updated by the own application</li> <li>Bulk failure mode is undefined: the implementation may either update as many resources as possible or none at all if any of them fails - do not depend on this. Only the result code(s) will specify what has been done</li> </ul>",
        "operationId": "UpdateDynamicResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourcesCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkResponseOK"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BulkResponseBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/BulkResponseNotFound"
          },
          "500": {
            "$ref": "#/components/responses/BulkResponseInternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "resources"
      }
    },
    "/dynamic-resources-bulk/v1/tenants/{tenantId}/applications/{applicationId}/resources/delete": {
      "post": {
        "tags": [
          "Dynamic Resource"
        ],
        "summary": "Delete dynamic resources",
        "description": "This endpoint is used to delete dynamic resources. Each array element represents a single dynamic resource so that it is possible to delete multiple dynamic resources.<br><br> When using the endpoint consider the following limitations: <ul> <li>The BearerToken used for calling this endpoint needs to be valid for the tenant where the dynamic resources will be deleted</li> <li>Max 100 dynamic resources per request allowed</li> <li>Dynamic resources can only be deleted by the own application</li> <li>The resource <b>id</b>, <b>type</b> and <b>name</b> are case sensitive</li> <li>Bulk failure mode is undefined: the implementation may either delete as many resources as possible or none at all if any of them fails - do not depend on this. Only the result code(s) will specify what has been done</li> </ul>",
        "operationId": "DeleteExistingDynamicResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourcesDeletion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkResponseOK"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BulkResponseBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/BulkResponseNotFound"
          },
          "500": {
            "$ref": "#/components/responses/BulkResponseInternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "resources"
      }
    },
    "/user-management/v1/tenants/{tenantId}/groups": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "summary": "List groups of tenant",
        "description": "List all groups of the given tenant.",
        "operationId": "ReadGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A String contained in name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "in": "query",
            "description": "The identifier of an application.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taggedGroupsAsFlatList",
            "in": "query",
            "description": "Flag to return a flat list for all tagged group. Only applicable if applicationId is present.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/user-management/v1/tenants/{tenantId}/groups/{groupId}": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "summary": "Read group",
        "description": "Read the group by providing its id.",
        "operationId": "ReadGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/user-management/v1/tenants/{tenantId}/groups/{groupId}/users": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "summary": "List users of group",
        "description": "List all users of the given group.",
        "operationId": "ListUsersOfGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call (pageSize, default 100).",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/role-management/v1/tenants/{tenantId}/roles/available": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List all available tenant- and application-roles",
        "operationId": "ReadAvailableRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of roles to return.",
            "schema": {
              "type": "string",
              "enum": [
                "application",
                "tenant"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A String contained in role name, display name or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call (pageSize, default 100).",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableRoles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/application-management/v1/tenants/{tenantId}/applications/{applicationId}/roles/{roleId}/users/{userId}": {
      "put": {
        "tags": [
          "Application Roles"
        ],
        "summary": "Add application role to an user",
        "operationId": "AddApplicationRoleToUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, user assigned to role"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application Roles"
        ],
        "summary": "Remove user from an application role",
        "operationId": "RemoveUserFromApplicationRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, user unassigned from role"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/application-management-bulk/v1/tenants/{tenantId}/applications/{applicationId}/roles/create-or-update": {
      "post": {
        "tags": [
          "Application Management Bulk"
        ],
        "summary": "Create or update application roles",
        "description": "This endpoint is used to register new and update existing application roles and their permissions. When creating application roles, MACMA does not provide ids. E.g. ids from the body payload are just representation of the ids within the application. Therefore, uniqueness of application roles in MACMA is established by combining <b>tenantId (path-parameter)</b>, <b>applicationId (path-parameter)</b>, <b>name (payload)</b>. Each array element represents a single application role so that it's possible to register multiple application roles and their permissions.",
        "operationId": "RegisterApplicationRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the application role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRolesCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkResponseOK"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/BulkResponseUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "applicationRoles"
      }
    },
    "/application-management-bulk/v1/tenants/{tenantId}/applications/{applicationId}/roles/delete": {
      "post": {
        "tags": [
          "Application Management Bulk"
        ],
        "summary": "Delete application roles",
        "description": "This endpoint is used to delete application roles and their permissions. Each array element represents a single application role so that it's possible to delete multiple application roles with their permissions.",
        "operationId": "DeleteExistingApplicationRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Id of the application managing the application role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRolesDeletion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkResponseOK"
          },
          "207": {
            "$ref": "#/components/responses/BulkResponseMultiStatus"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/BulkResponseUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-test-setup": {
          "placeholders": {
            "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
            "applicationId": "macma-system-test"
          }
        },
        "x-codegen-request-body-name": "applicationRoles"
      }
    },
    "/role-management/v1/tenants/{tenantId}/roles": {
      "post": {
        "tags": [
          "Tenant Roles"
        ],
        "summary": "Create tenant role",
        "operationId": "CreateTenantRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadTenantRoleWithPermissions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/NamingConflictError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-codegen-request-body-name": "role"
      }
    },
    "/role-management/v1/tenants/{tenantId}/roles/{roleId}": {
      "delete": {
        "tags": [
          "Tenant Roles"
        ],
        "summary": "Delete tenant role",
        "operationId": "DeleteTenantRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, role deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/role-management/v1/tenants/{tenantId}/roles/{roleId}/users/{userId}": {
      "put": {
        "tags": [
          "Tenant Roles"
        ],
        "summary": "Add role to a user",
        "operationId": "AddTenantRoleToUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, user assigned to role"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tenant Roles"
        ],
        "summary": "Remove user from a role",
        "operationId": "RemoveUserFromTenantRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, user unassigned from role"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/user-management/v1/tenants/{tenantId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List users of tenant",
        "description": "List all users of the given tenant.",
        "operationId": "ReadUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call (pageSize, default 100).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A String contained in username, first or last name, or email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "EmployeeId of the user. The query parameter \"search\" and \"employeeId\" are mutually exclusive. You can EITHER provide \"search\" OR \"employeeId\"",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "operationId": "CreateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/components/responses/NamingConflictError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-codegen-request-body-name": "user"
      }
    },
    "/user-management/v1/tenants/{tenantId}/users/search": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Read list of users by user id",
        "description": "Read list of users given as user ids (max 500 items)",
        "operationId": "ReadListOfUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "description": "array of user ids, cannot be empty",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBulkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-codegen-request-body-name": "items"
      }
    },
    "/user-management/v1/tenants/{tenantId}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Read user",
        "description": "Read the user by providing its id.",
        "operationId": "ReadUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadSingleUser"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content, user deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/user-management/v1/tenants/{tenantId}/users/{userId}/temporary-password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Reset password",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ],
        "x-codegen-request-body-name": "password"
      }
    },
    "/user-management/v1/tenants/{tenantId}/users/{userId}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List groups of user",
        "description": "List all groups of the given user.",
        "operationId": "ListGroupsOfUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page index which is starting by 0 (default 0).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of items to return per call (pageSize, default 100).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A String contained in the group name, case insensitive.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/user-management/v1/tenants/{tenantId}/groups/{groupId}/tags/application": {
      "put": {
        "tags": [
          "User Groups"
        ],
        "summary": "Tag groups with applicationIds",
        "operationId": "TagGroupsWithApplicationIds",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupTags"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of application identifier assigned to the group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupTags"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "macma": []
          }
        ]
      }
    },
    "/auth/realms/{tenantId}/protocol/openid-connect/auth": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect Authorization Endpoint",
        "description": "Authenticate at the OpenID Connect Authorization Endpoint (https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).",
        "operationId": "OpenIDConnectAuthorization(get)",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The OpenID Connect scope (e.g. 'openid').",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "The OpenID Connect response type (e.g. 'code' for code flow).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The Client ID of the application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Redirection URI to which the response will be sent.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "description": "Method used to generate the challenge.",
            "in": "query",
            "schema": {
              "type": "string",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "plain",
                    "S256",
                    "nullable"
                  ],
                  "description": "Method used to generate the challenge. Required when using PKCE.",
                  "nullable": true
                }
              ]
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "description": "Generated challenge from the code_verifier. Required when using PKCE.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Opaque value used to maintain state between the request and the callback to prevent e.g. Cross-Site Request Forgery (CSRF, XSRF).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_mode",
            "in": "query",
            "description": "Informs the authorization server of the mechanism to be used for returning authorization response parameters from the authorization endpoint. There exists the 'query' and the 'fragment' response mode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Authorization result. The location header contains the redirection URI (https://openid.net/specs/openid-connect-core-1_0.html#AuthResponse). In case of an error the URI contains a query parameter named 'error' (https://openid.net/specs/openid-connect-core-1_0.html#AuthError).",
            "content": {}
          },
          "400": {
            "description": "The request is invalid. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "message": "Invalid content. Object has missing required properties ([{property1},{property2}])"
                  }
                }
              }
            }
          },
          "500": {
            "description": "There is an error in the request processing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect Authorization Endpoint",
        "description": "Authenticate at the OpenID Connect Authorization Endpoint (https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).",
        "operationId": "OpenIDConnectAuthorization(post)",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "client_id",
                  "redirect_uri",
                  "response_type",
                  "scope"
                ],
                "properties": {
                  "scope": {
                    "type": "string",
                    "description": "The OpenID Connect scope (e.g. 'openid')."
                  },
                  "response_type": {
                    "type": "string",
                    "description": "The OpenID Connect response type (e.g. 'code' for code flow)."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The Client ID of the application."
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Redirection URI to which the response will be sent."
                  },
                  "code_challenge_method": {
                    "description": "Method used to generate the challenge. Required when using PKCE.",
                    "enum": [
                      "plain",
                      "S256"
                    ],
                    "type": "string"
                  },
                  "code_challenge": {
                    "description": "Generated challenge from the code_verifier. Required when using PKCE.",
                    "type": "string"
                  },
                  "state": {
                    "type": "string",
                    "description": "Opaque value used to maintain state between the request and the callback to prevent e.g. Cross-Site Request Forgery (CSRF, XSRF)."
                  },
                  "response_mode": {
                    "type": "string",
                    "description": "Informs the authorization server of the mechanism to be used for returning authorization response parameters from the authorization endpoint. There exists the 'query' and the 'fragment' response mode."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "302": {
            "description": "Authorization result. The location header contains the redirection URI (https://openid.net/specs/openid-connect-core-1_0.html#AuthResponse). In case of an error the URI contains a query parameter named 'error' (https://openid.net/specs/openid-connect-core-1_0.html#AuthError)."
          },
          "400": {
            "description": "The request is invalid. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "message": "Invalid content. Object has missing required properties ([{property1},{property2}])"
                  }
                }
              }
            }
          },
          "500": {
            "description": "There is an error in the request processing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/realms/{tenantId}/.well-known/openid-configuration": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect Discovery Endpoint.",
        "description": "Obtaining OpenID Provider Configuration Information. Refer to https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig for more detailed information.",
        "operationId": "OpenIDConnectDiscovery",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "responses": {
          "200": {
            "description": "The response is a set of Claims about the OpenID Provider's configuration, including all necessary endpoints and public key location information as JSON object. Refer to https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig for detailed schema information."
          }
        }
      }
    },
    "/access-management/v1/tenants/{tenantId}/openid-connect/token": {
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "OpenID Connect Token Endpoint",
        "description": "Request OAuth2 Access and Refresh Tokens.\nFor end user authentication (authorization code grant flow) see https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint.\nFor application authentication (client credentials grant flow) see https://tools.ietf.org/html/rfc6749#section-4.4.\n",
        "operationId": "OpenIDConnectToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenantId"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeFlowRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ClientCredentialsFlowRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A result containing the OpenID Connect Access and Refresh Tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Details are provided in the message body.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "message": "Invalid content. Object has missing required properties ([{property1},{property2}])"
                  }
                }
              }
            }
          },
          "500": {
            "description": "There is an error in the request processing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/portal-api/v3/registration-configuration": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Get configuration used to register into Portal",
        "operationId": "PortalRegistration",
        "responses": {
          "200": {
            "description": "Returns configuration for Portal registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SCSRegistrationRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Acl": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 1
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AclEntry"
            }
          }
        }
      },
      "AclEntry": {
        "required": [
          "applicationId",
          "grants",
          "resourceId",
          "resourceOwningTenantId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string",
            "description": "Uniquely identifies the resource of a specific type in the scope of the given application.",
            "example": "4cd58843-ff9f-44e6-8408-50ba777ced23"
          },
          "resourceType": {
            "type": "string",
            "description": "URN referencing the resource type to differentiate between different types of resources of an application.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          },
          "resourceOwningTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the tenant owning this resource.",
            "example": "d523cc5a-a8d4-4341-b43b-ceda30fdffcb"
          },
          "applicationId": {
            "type": "string",
            "description": "Uniquely identifies the application.",
            "example": "b50f1f43-33d5-4667-b4fc-65cc18fc354d"
          },
          "grants": {
            "type": "array",
            "description": "Principals with access to this resource.",
            "items": {
              "$ref": "#/components/schemas/Grant"
            }
          }
        }
      },
      "Grant": {
        "required": [
          "privileges",
          "roleName"
        ],
        "type": "object",
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Uniquely identifies the role of this grantee.",
            "example": "urn:macma-application-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:b50f1f43-33d5-4667-b4fc-65cc18fc354d:access-manager"
          },
          "privileges": {
            "type": "array",
            "description": "List of privileges for the resource.",
            "items": {
              "type": "string",
              "enum": [
                "read",
                "modify",
                "add",
                "delete",
                "execute"
              ]
            }
          }
        }
      },
      "EntityId": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the entity.",
            "example": "58be984c-da35-4b92-85ae-da5ee3c5631e"
          }
        }
      },
      "TenantsRead": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 1
          },
          "currentPage": {
            "type": "number",
            "description": "The starting page index which is starting by 0."
          },
          "pageSize": {
            "type": "number",
            "description": "The number of items to returning per call.",
            "example": 10
          },
          "totalItems": {
            "type": "number",
            "description": "The amount of total items."
          },
          "totalPages": {
            "type": "number",
            "description": "The amount of total pages."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantReadResponse"
            }
          }
        }
      },
      "TenantReadResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "58be984c-da35-4b92-85ae-da5ee3c5631e"
          },
          "name": {
            "type": "string",
            "example": "ACMECorp"
          },
          "createdByTenantId": {
            "type": "string",
            "format": "uuid",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          },
          "createdForTenantId": {
            "type": "string",
            "format": "uuid",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          },
          "hasOutgoingContracts": {
            "type": "boolean"
          }
        }
      },
      "CreateTenant": {
        "required": [
          "name",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "id of the created tenant - request will fail if this has been used previously",
            "type": "string",
            "format": "uuid",
            "example": "e6ff3a22-db32-42e4-8f2f-0866f620971c"
          },
          "name": {
            "type": "string",
            "example": "ACMECorp"
          },
          "username": {
            "type": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "example": "xQ9BvToq.F1HyR!!!"
          }
        }
      },
      "ContractCreation": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "consumingTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "The tenant which acts as the contract consumer.",
            "example": "3d2981a8-4774-43ce-a08c-04596f720e48"
          },
          "name": {
            "type": "string",
            "description": "Name of contract that is unique for two contractual parties.",
            "example": "FizzBuzz"
          },
          "description": {
            "type": "string",
            "description": "Description of contract, may be empty.",
            "example": "This is a wonderful fizzbuzz"
          },
          "username": {
            "type": "string",
            "description": "An optional username that all roles of this contract will be assigned to. Failure of assignment will not be reported.",
            "example": "johnDoe42"
          },
          "applicableScope": {
            "type": "string",
            "enum": [
              "PROVIDER",
              "CONSUMER"
            ],
            "default": "CONSUMER",
            "description": "Whether the contract will give access to the provider's or consumer's resources.",
            "example": "CONSUMER"
          },
          "roles": {
            "type": "array",
            "description": "The roles which are the contractual basis.",
            "items": {
              "$ref": "#/components/schemas/ContractRoleCreation"
            }
          }
        }
      },
      "ContractRoleCreation": {
        "required": [
          "applicationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string",
            "description": "The name of the role.",
            "example": "access-manager"
          },
          "applicationId": {
            "type": "string",
            "description": "Uniquely identifies the application managing the resource.",
            "example": "macma"
          }
        }
      },
      "ResourceCreate": {
        "required": [
          "id",
          "privileges",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "Uniquely identifies in combination with type the resource of the application.",
            "example": "4cd58843-ff9f-44e6-8408-50ba777ced23"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Human-readable display name of resource. It is discouraged to not send this property, or to send an empty value. In case this property is not sent, or it is empty the 'id' will be used instead. Accepts alphabetic characters, digits and /-_+=()[]#.@&%!:,;'$?* without leading or trailing whitespace.",
            "example": "Machine 123"
          },
          "type": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "URN referencing the resource type.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Human-readable resource description. Accepts alphabetic characters, digits and /-_+=()[]#.@&%!:,;'$?* without leading or trailing whitespace.",
            "example": "The machine used to create part x"
          },
          "iconUri": {
            "type": "string",
            "maxLength": 255,
            "description": "HTTP(S) URI referencing the resource icon.",
            "example": "https://my.server.com/icons/myIcon.png"
          },
          "privileges": {
            "type": "array",
            "description": "List of privileges for the resource.",
            "example": [
              "read",
              "modify"
            ],
            "items": {
              "type": "string",
              "enum": [
                "read",
                "modify",
                "add",
                "delete",
                "execute"
              ]
            }
          }
        }
      },
      "ResourcesCreation": {
        "type": "object",
        "properties": {
          "items": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceCreate"
            }
          }
        }
      },
      "ResourceDeletion": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "Uniquely identifies in combination with type the resource of the application.",
            "example": "4cd58843-ff9f-44e6-8408-50ba777ced23"
          },
          "type": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "URN referencing the resource type.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          }
        }
      },
      "ResourcesDeletion": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDeletion"
            }
          }
        }
      },
      "Resources": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "number",
            "description": "The current page."
          },
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response."
          },
          "totalItems": {
            "type": "number",
            "description": "The amount of total items."
          },
          "totalPages": {
            "type": "number",
            "description": "The amount of total pages."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        }
      },
      "Resource": {
        "required": [
          "id",
          "privileges",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "Uniquely identifies in combination with type the resource of the application.",
            "example": "dafdd949-80c3-459a-b94c-5d6398840e07"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Human-readable display name of resource. Leading or trailing spaces as well as some control chars are not allowed.",
            "example": "Machine 123"
          },
          "type": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "URN referencing the resource type.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          },
          "isDynamic": {
            "type": "boolean",
            "description": "True if the Resource is dynamic, False if the Resource is static",
            "example": "false"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Human-readable resource description. Leading or trailing spaces as well as some control chars are not allowed.",
            "example": "The machine used to create part x"
          },
          "iconUri": {
            "type": "string",
            "description": "HTTP(S) URI referencing the resource icon.",
            "example": "https://my.server.com/icons/myIcon.png"
          },
          "privileges": {
            "type": "array",
            "description": "List of privileges for the resource.",
            "example": [
              "read",
              "modify"
            ],
            "items": {
              "type": "string",
              "enum": [
                "read",
                "modify",
                "add",
                "delete",
                "execute"
              ]
            }
          }
        }
      },
      "ApplicationRole": {
        "required": [
          "displayName",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string",
            "description": "The technical name of the role (e.g. for authorization).",
            "example": "developer"
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "The display name of the role (e.g. for UI).",
            "example": "IoT Developer"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "An additional description which explains e.g. the purpose of the role.",
            "example": "has advanced access"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRolePrivileges"
            }
          }
        }
      },
      "ApplicationRolesCreation": {
        "type": "object",
        "properties": {
          "items": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRole"
            }
          }
        }
      },
      "PermissionRead": {
        "required": [
          "privileges",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the tenant owning this resource.",
            "example": "d523cc5a-a8d4-4341-b43b-ceda30fdffcb"
          },
          "applicationId": {
            "type": "string",
            "description": "The application's id.",
            "example": "b50f1f43-33d5-4667-b4fc-65cc18fc354d"
          },
          "resourceId": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "Uniquely identifies the resource of a specific type in the scope of the given application.",
            "example": "4cd58843-ff9f-44e6-8408-50ba777ced23"
          },
          "resourceType": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "URN referencing the resource type to differentiate between different types of resources of an application.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          },
          "isDynamicResource": {
            "type": "boolean",
            "description": "True if the Resource is dynamic, False if the Resource is static",
            "example": "false"
          },
          "privileges": {
            "minItems": 1,
            "type": "array",
            "description": "List of privileges for the resource.",
            "example": [
              "read",
              "modify"
            ],
            "items": {
              "type": "string",
              "enum": [
                "read",
                "modify",
                "add",
                "delete",
                "execute"
              ]
            }
          }
        }
      },
      "TenantRolePrivileges": {
        "required": [
          "owningTenantId",
          "applicationId",
          "privileges",
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the tenant owning this resource.",
            "example": "d523cc5a-a8d4-4341-b43b-ceda30fdffcb"
          },
          "applicationId": {
            "type": "string",
            "description": "The application's id.",
            "example": "b50f1f43-33d5-4667-b4fc-65cc18fc354d"
          },
          "resourceId": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "Uniquely identifies the resource of a specific type in the scope of the given application.",
            "example": "4cd58843-ff9f-44e6-8408-50ba777ced23"
          },
          "resourceType": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "URN referencing the resource type to differentiate between different types of resources of an application.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          },
          "privileges": {
            "minItems": 1,
            "type": "array",
            "description": "List of privileges for the resource.",
            "example": [
              "read",
              "modify"
            ],
            "items": {
              "type": "string",
              "enum": [
                "read",
                "modify",
                "add",
                "delete",
                "execute"
              ]
            }
          }
        }
      },
      "ApplicationRolePrivileges": {
        "required": [
          "privileges",
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "Uniquely identifies the resource of a specific type in the scope of the given application.",
            "example": "4cd58843-ff9f-44e6-8408-50ba777ced23"
          },
          "resourceType": {
            "maxLength": 255,
            "pattern": "^[A-Za-z0-9()+,\\-.:=@;$_!*'%\\/?#]+$",
            "type": "string",
            "description": "URN referencing the resource type to differentiate between different types of resources of an application.",
            "example": "urn:isan:0000-0000-9E59-0000-O-0000-0000-2"
          },
          "privileges": {
            "minItems": 1,
            "type": "array",
            "description": "List of privileges for the resource.",
            "example": [
              "read",
              "modify"
            ],
            "items": {
              "type": "string",
              "enum": [
                "read",
                "modify",
                "add",
                "delete",
                "execute"
              ]
            }
          }
        }
      },
      "ApplicationRoleDeletion": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string",
            "description": "The technical name of the role (e.g. for authorization).",
            "example": "iot-developer"
          }
        }
      },
      "ApplicationRolesDeletion": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRoleDeletion"
            }
          }
        }
      },
      "ApplicationsResponse": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 1
          },
          "currentPage": {
            "type": "number",
            "description": "The starting page index which is starting by 0."
          },
          "pageSize": {
            "type": "number",
            "description": "The number of items to returning per call.",
            "example": 10
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponse"
            }
          }
        }
      },
      "ApplicationResponse": {
        "required": [
          "clientId",
          "id",
          "name",
          "owningTenantId",
          "owningTenantName",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1qjbd49azhwxs1o15h9bg87wn2"
          },
          "name": {
            "type": "string",
            "example": "webapp"
          },
          "displayName": {
            "type": "string",
            "example": "Nice name"
          },
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "example": "c6751e19-86d1-4f64-82e2-0e2f10f3d56a"
          },
          "owningTenantName": {
            "type": "string",
            "example": "Example Inc."
          },
          "includesPublicClient": {
            "type": "boolean",
            "example": true
          },
          "enableUserLoginWithConfidentialClient": {
            "type": "boolean",
            "example": true
          },
          "webOriginOrRedirectUriMismatch": {
            "type": "boolean",
            "example": false
          },
          "clientId": {
            "type": "string",
            "example": "1qjbd49azhwxs1o15h9bg87wn2"
          },
          "publicClientId": {
            "type": "string",
            "example": "1qjbd49azhwxs1o15h9bg87wn2-frontend"
          },
          "redirectUris": {
            "type": "array",
            "example": [
              "https://www.example.com/*"
            ],
            "items": {
              "type": "string"
            }
          },
          "webOrigins": {
            "type": "array",
            "example": [
              "https://www.example.com"
            ],
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "example": [
              "Confidential client 6yncginm71r81ixvkmveoyeay for application MyApp does not exist in keycloak."
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApplicationUpdate": {
        "required": [
          "enableUserLoginWithConfidentialClient",
          "includesPublicClient",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9\\-_+=()\\[\\]#.@&%!',;$]+([ ]+[a-zA-Z0-9\\-_+=()\\[\\]#.@&%!',;$]+)*$",
            "type": "string",
            "example": "My App"
          },
          "displayName": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9ÃÃ¼Ã¶Ã¤ÃÃÃ\\-_+=()\\[\\]#.@&%!',;$]+([ ]+[a-zA-Z0-9ÃÃ¼Ã¶Ã¤ÃÃÃ\\-_+=()\\[\\]#.@&%!',;$]+)*$",
            "type": "string",
            "example": "My App nice name"
          },
          "includesPublicClient": {
            "type": "boolean",
            "description": "If a public client is required (for browser, mobile or desktop applications using login independent of its backend). It is only possible to include a public client if the user login is enabled with the confidential client.",
            "example": true,
            "default": false
          },
          "enableUserLoginWithConfidentialClient": {
            "type": "boolean",
            "description": "Enables Authorization Code Grant with confidential client. If includesPublicClient is true enableUserLoginWithConfidentialClient is automatically enabled.",
            "example": true,
            "default": false
          },
          "redirectUris": {
            "type": "array",
            "description": "Valid URLs to redirect to after SSO login. May end with * as wildcard.",
            "items": {
              "type": "string",
              "example": "http://bosch.com/*"
            }
          },
          "webOrigins": {
            "type": "array",
            "description": "Allowed web origins for cross origin resource sharing (CORS). Must match scheme://hostname[:port]",
            "items": {
              "type": "string",
              "example": "http://bosch.com"
            }
          }
        }
      },
      "ApplicationRegistration": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9\\-_+=()\\[\\]#.@&%!',;$]+([ ]+[a-zA-Z0-9\\-_+=()\\[\\]#.@&%!',;$]+)*$",
            "type": "string",
            "example": "My App"
          },
          "displayName": {
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9ÃÃ¼Ã¶Ã¤ÃÃÃ\\-_+=()\\[\\]#.@&%!',;$]+([ ]+[a-zA-Z0-9ÃÃ¼Ã¶Ã¤ÃÃÃ\\-_+=()\\[\\]#.@&%!',;$]+)*$",
            "type": "string",
            "example": "My App nice name"
          },
          "clientSecret": {
            "type": "string",
            "maxLength": 200,
            "pattern": "^[a-zA-Z0-9\\-_=()\\[\\]#.@&!:,;'$?/*]+([ ]+[a-zA-Z0-9\\-_=()\\[\\]#.@&!:,;'$?/*]+)*$",
            "description": "Client credential's secret for OAuth flows of the backend. It must not be used in public clients like desktop, mobile or browser application.",
            "example": "2k3fj3aseghhjllaojew4tj"
          },
          "includesPublicClient": {
            "type": "boolean",
            "description": "If a public client is required (for browser, mobile or desktop applications using login independent of its backend). It is only possible to include a public client if the user login is enabled with the confidential client.",
            "example": true,
            "default": false
          },
          "enableUserLoginWithConfidentialClient": {
            "type": "boolean",
            "description": "Enables Authorization Code Grant with confidential client. If includesPublicClient is true enableUserLoginWithConfidentialClient is automatically enabled.",
            "example": true,
            "default": false
          },
          "redirectUris": {
            "type": "array",
            "description": "Valid URLs to redirect to after SSO login. May end with * as wildcard.",
            "items": {
              "type": "string",
              "example": "http://bosch.com/*"
            }
          },
          "webOrigins": {
            "type": "array",
            "description": "Allowed web origins for cross origin resource sharing (CORS). Must match scheme://hostname[:port]",
            "items": {
              "type": "string",
              "example": "http://bosch.com"
            }
          }
        }
      },
      "ApplicationRegistrationResponse": {
        "required": [
          "clientId",
          "clientSecret",
          "id",
          "name",
          "owningTenantId",
          "owningTenantName",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1qjbd49azhwxs1o15h9bg87wn2"
          },
          "name": {
            "type": "string",
            "example": "webapp"
          },
          "displayName": {
            "type": "string",
            "example": "My App nice name"
          },
          "description": {
            "type": "string",
            "example": "This is the MACMA Webapp."
          },
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "example": "c6751e19-86d1-4f64-82e2-0e2f10f3d56a"
          },
          "owningTenantName": {
            "type": "string",
            "example": "Example Inc."
          },
          "includesPublicClient": {
            "type": "boolean",
            "example": true
          },
          "enableUserLoginWithConfidentialClient": {
            "type": "boolean",
            "example": true
          },
          "clientId": {
            "type": "string",
            "example": "1qjbd49azhwxs1o15h9bg87wn2"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client credential's secret for OAuth flows of backend services. It must not be used in public client like desktop, mobile or browser application.",
            "example": "2k3fj3aseghhjllaojew4tj"
          },
          "publicClientId": {
            "type": "string",
            "example": "1qjbd49azhwxs1o15h9bg87wn2-frontend"
          },
          "redirectUris": {
            "type": "array",
            "example": [
              "https://www.example.com/*"
            ],
            "items": {
              "type": "string"
            }
          },
          "webOrigins": {
            "type": "array",
            "example": [
              "https://www.example.com"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApplicationClientSecretUpdate": {
        "required": [
          "clientSecret"
        ],
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "maxLength": 200,
            "pattern": "^[a-zA-Z0-9\\-_=()\\[\\]#.@&!:,;'$?/*]+([ ]+[a-zA-Z0-9\\-_=()\\[\\]#.@&!:,;'$?/*]+)*$",
            "description": "Client credential's secret for OAuth flows of the backend. It must not be used in public clients like desktop, mobile or browser application.",
            "example": "2k3fj3aseghhjllaojew4tj"
          }
        }
      },
      "ResetPassword": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The new password",
            "example": "my-new-password!"
          }
        }
      },
      "Group": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the group.",
            "example": "2ba1f8b3-16f9-4b9c-833c-159fb53a9882"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent group. Groups without parentId are top level groups.",
            "example": "null"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ÃÃ¼Ã¶Ã¤ÃÃÃ\\-_+=()\\[\\]#.@&%!',;$]+([ ]+[a-zA-Z0-9ÃÃ¼Ã¶Ã¤ÃÃÃ\\-_+=()\\[\\]#.@&%!',;$]+)*$",
            "type": "string",
            "description": "The group name.",
            "example": "Group name"
          },
          "groups": {
            "type": "array",
            "description": "Groups",
            "example": [
              {
                "id": "d9e06332-e3f7-4d94-9436-d7b98a52f40d",
                "name": "Subgroup 1",
                "parentId": "2080259f-e765-404b-85c1-97ceff170cd0",
                "groups": []
              },
              {
                "id": "0bd3b716-481e-40f9-bcbc-6f72242a8175",
                "name": "Subgroup 2",
                "parentId": "2080259f-e765-404b-85c1-97ceff170cd0",
                "groups": [
                  {
                    "id": "6224ca11-2e70-4913-8094-785ba6fc5ff1",
                    "name": "Subgroup 2.1",
                    "parentId": "0bd3b716-481e-40f9-bcbc-6f72242a8175",
                    "groups": []
                  }
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "applicationIds": {
            "type": "array",
            "nullable": true,
            "description": "Set of application identifiers that are assigned to the group",
            "items": {
              "uniqueItems": true,
              "type": "string",
              "description": "Id of an application",
              "example": [
                "macma",
                "1s74m3t8xfto0142b49yy3wgjb"
              ]
            }
          }
        }
      },
      "Groups": {
        "required": [
          "currentPage",
          "itemCount",
          "items",
          "pageSize"
        ],
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 1
          },
          "currentPage": {
            "type": "number",
            "description": "The starting page index which is starting by 0."
          },
          "pageSize": {
            "type": "number",
            "description": "The number of items to returning per call."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "GroupTags": {
        "required": [
          "applicationIds"
        ],
        "type": "object",
        "properties": {
          "applicationIds": {
            "type": "array",
            "description": "List of ids of an application.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "example": "01300ataq111ues1m4lecptx"
            }
          }
        }
      },
      "ReadApplicationRole": {
        "required": [
          "id",
          "owningTenantId",
          "applicationId",
          "displayName",
          "name",
          "type",
          "owningTenantName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the role.",
            "example": "urn:macma-application-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:b50f1f43-33d5-4667-b4fc-65cc18fc354d:iot-developer"
          },
          "applicationId": {
            "type": "string",
            "description": "The id of the role's application.",
            "example": "b50f1f43-33d5-4667-b4fc-65cc18fc354d"
          },
          "name": {
            "type": "string",
            "description": "The technical name of the role (e.g. for authorization).",
            "example": "iot-developer"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the role (e.g. for UI).",
            "example": "IoT Developer"
          },
          "description": {
            "type": "string",
            "description": "An additional description which explains e.g. the purpose of the role.",
            "example": "has advanced access"
          },
          "type": {
            "pattern": "macma-application-role|",
            "type": "string",
            "description": "The type of the role",
            "example": "macma-application-role"
          },
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the tenant owning this resource.",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          },
          "owningTenantName": {
            "type": "string",
            "description": "Name of owning tenant",
            "example": "Example Inc"
          }
        }
      },
      "ReadTenantRole": {
        "required": [
          "displayName",
          "id",
          "name",
          "type",
          "owningTenantId",
          "owningTenantName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the role.",
            "example": "urn:macma-tenant-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:iot-developer"
          },
          "name": {
            "type": "string",
            "description": "The technical name of the role (e.g. for authorization).",
            "example": "iot-developer"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the role (e.g. for UI).",
            "example": "IoT Developer"
          },
          "description": {
            "type": "string",
            "description": "An additional description which explains e.g. the purpose of the role.",
            "example": "has advanced access"
          },
          "type": {
            "pattern": "macma-tenant-role|",
            "type": "string",
            "description": "The type of the role",
            "example": "macma-tenant-role"
          },
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the tenant owning this role.",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          },
          "owningTenantName": {
            "type": "string",
            "description": "Name of owning tenant",
            "example": "Example Inc"
          }
        }
      },
      "ReadTenantRoleWithPermissions": {
        "required": [
          "displayName",
          "id",
          "name",
          "permissions",
          "type",
          "owningTenantId",
          "owningTenantName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the role.",
            "example": "urn:macma-tenant-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:iot-developer"
          },
          "name": {
            "type": "string",
            "description": "The technical name of the role (e.g. for authorization).",
            "example": "iot-developer"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the role (e.g. for UI).",
            "example": "IoT Developer"
          },
          "description": {
            "type": "string",
            "description": "An additional description which explains e.g. the purpose of the role.",
            "example": "has advanced access"
          },
          "type": {
            "type": "string",
            "pattern": "macma-tenant-role|",
            "description": "The type of the role.",
            "example": "macma-tenant-role"
          },
          "owningTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the tenant owning this role.",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          },
          "owningTenantName": {
            "type": "string",
            "description": "Name of owning tenant",
            "example": "Example Inc"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionRead"
            }
          }
        }
      },
      "CreateRole": {
        "required": [
          "displayName",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 200,
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "type": "string",
            "description": "The technical name of the role (e.g. for authorization).",
            "example": "iot-developer"
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "The display name of the role (e.g. for UI).",
            "example": "IoT Developer"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "An additional description which explains e.g. the purpose of the role.",
            "example": "has advanced access"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantRolePrivileges"
            }
          }
        }
      },
      "ApplicationRoles": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "number",
            "description": "The starting page index which is starting by 0."
          },
          "pageSize": {
            "type": "number",
            "description": "The number of items to returning per call.",
            "example": 10
          },
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 1
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadApplicationRole"
            }
          }
        }
      },
      "AvailableRoles": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "number",
            "description": "The starting page index which is starting by 0."
          },
          "pageSize": {
            "type": "number",
            "description": "The number of items to returning per call.",
            "example": 10
          },
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 2
          },
          "items": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReadTenantRole"
                },
                {
                  "$ref": "#/components/schemas/ReadApplicationRole"
                }
              ],
              "discriminator": {
                "propertyName": "type"
              }
            }
          }
        }
      },
      "ReadUser": {
        "required": [
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "634cea45-c812-461d-bd8c-6bda08ce7ee9"
          },
          "username": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "administrator"
          },
          "firstName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Max"
          },
          "lastName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "maxLength": 76,
            "minLength": 1,
            "type": "string",
            "example": "example@address.com"
          },
          "phoneNumber": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "+(11)22 33"
          },
          "employeeId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "mvm5gr"
          }
        }
      },
      "ReadSingleUser": {
        "required": [
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "634cea45-c812-461d-bd8c-6bda08ce7ee9"
          },
          "username": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "administrator"
          },
          "firstName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Max"
          },
          "lastName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "maxLength": 76,
            "minLength": 1,
            "type": "string",
            "example": "example@address.com"
          },
          "hasLocalIdentity": {
            "type": "boolean",
            "description": "Whether user has local credentials (independent of identity federation).",
            "example": true
          },
          "hasFederationLink": {
            "type": "boolean",
            "description": "Whether user is managed by a LDAP/active-directory based federated identity provider.",
            "example": false
          },
          "hasFederatedIdentity": {
            "type": "boolean",
            "description": "Whether user is linked to an Open Id Connect 2.0 identity provider.",
            "example": false
          },
          "phoneNumber": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Phone number of the user",
            "example": "+(11)22 33"
          },
          "employeeId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "mvm5gr"
          }
        }
      },
      "Users": {
        "required": [
          "itemCount",
          "items"
        ],
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "number",
            "description": "The amount of items in this response.",
            "example": 1
          },
          "currentPage": {
            "type": "number",
            "description": "The starting page index which is starting by 0."
          },
          "pageSize": {
            "type": "number",
            "description": "The number of items to returning per call.",
            "example": 10
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadUser"
            }
          }
        }
      },
      "UserBulkRequest": {
        "type": "object",
        "properties": {
          "items": {
            "maxItems": 500,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateUser": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "administrator"
          },
          "firstName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Max"
          },
          "lastName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "maxLength": 76,
            "minLength": 1,
            "type": "string",
            "example": "example@address.com"
          },
          "phoneNumber": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "+(11)22 33"
          },
          "employeeId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "mvm5gr"
          }
        }
      },
      "UserInfo": {
        "required": [
          "email",
          "email_verified",
          "preferred_username",
          "roles",
          "sub",
          "tid",
          "tname"
        ],
        "type": "object",
        "properties": {
          "sub": {
            "type": "string",
            "description": "Subject - Identifier for the User at the Issuer.",
            "example": "7d71dc3d-49b7-4419-86b1-7a8bb734b8de"
          },
          "preferred_username": {
            "type": "string",
            "description": "Shorthand name by which the User wishes to be referred to at the RP.",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "description": "End-User's preferred e-mail address.",
            "example": "email@example.com"
          },
          "email_verified": {
            "type": "boolean",
            "description": "True if the End-User's e-mail address has been verified; otherwise false."
          },
          "roles": {
            "type": "array",
            "description": "Roles assigned to the User.",
            "example": [
              "urn:macma-application-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:b50f1f43-33d5-4667-b4fc-65cc18fc354d:access-manager",
              "urn:macma-application-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:b50f1f43-33d5-4667-b4fc-65cc18fc354d:read-acl"
            ],
            "items": {
              "type": "string"
            }
          },
          "tname": {
            "type": "string",
            "description": "Tenant Name",
            "example": "bci"
          },
          "tid": {
            "type": "string",
            "description": "Tenant Id",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          }
        }
      },
      "Introspect": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "tid": {
            "type": "string",
            "description": "Tenant Id",
            "example": "7311ea8c-5d48-43fe-acf9-980eedf24b6c"
          },
          "iss": {
            "type": "string",
            "description": "Issuer",
            "example": "https://server.example.com"
          },
          "jti": {
            "type": "string",
            "description": "String identifier for the token",
            "example": "6ed999a8-3a15-4f66-8301-45f2d2df2e80"
          },
          "active": {
            "type": "boolean",
            "description": "Boolean indicator of whether or not the presented token is currently active."
          },
          "iat": {
            "type": "integer",
            "description": "Integer timestamp (in seconds since 1970) indicating when this token was originally issued.",
            "example": 1565355080
          },
          "exp": {
            "type": "integer",
            "description": "Integer timestamp (in seconds since 1970) indicating when this token will expire.",
            "example": 1565355379
          },
          "riexp": {
            "type": "integer",
            "description": "Integer timestamp (in seconds since 1970-01-01T00:00:00Z) indicating the recommended introspection result trust expiration.",
            "example": 1565355371
          },
          "nbf": {
            "type": "integer",
            "description": "Integer timestamp (in seconds since 1970) indicating when this token is not to be used before.",
            "example": 0
          },
          "aud": {
            "type": "array",
            "description": "Service-specific string identifier or list of string identifiers representing the intended audience. The identifiers are the clients' ids.",
            "example": [
              "macma",
              "ppm"
            ],
            "items": {
              "type": "string"
            }
          },
          "scope": {
            "type": "string",
            "description": "Scope of the token.",
            "example": "openid email"
          },
          "roles": {
            "type": "array",
            "example": [
              "urn:macma-application-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:macma:access-manager",
              "urn:macma-application-role:7311ea8c-5d48-43fe-acf9-980eedf24b6c:macma:read-acl"
            ],
            "items": {
              "type": "string",
              "description": "Roles assigned to the User"
            }
          },
          "azp": {
            "type": "string",
            "description": "Authorized party to which the token was issued, both for user login and service to service communication."
          },
          "client_id": {
            "type": "string",
            "description": "The id of the client used during login (both user login and client authentication)."
          },
          "clientId": {
            "type": "string",
            "deprecated": true,
            "description": "(deprecated) The id of the client used during login."
          },
          "sid": {
            "type": "string",
            "description": "The session id of the user used during login. (only for user login)"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "details": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "OAuthOIDCErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "AuthorizationCodeFlowRequest": {
        "required": [
          "grant_type",
          "client_id",
          "redirect_uri"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Denotes the flow which shall be used. For Authorization Code Grant with PKCE (RFC 7636) use authorization_code."
          },
          "client_id": {
            "type": "string",
            "description": "The client id to login."
          },
          "client_secret": {
            "type": "string",
            "description": "The secret of a client. If the client was issued a client secret, then the server must authenticate the client."
          },
          "code_verifier": {
            "type": "string",
            "description": "The code verifier for the PKCE request, that the app originally generated before the authorization request. Required when using PKCE."
          },
          "code": {
            "type": "string",
            "description": "The authorization code received from the authorization endpoint. Required when using PKCE."
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect uri which was sent with the authorization endpoint request."
          }
        }
      },
      "ClientCredentialsFlowRequest": {
        "required": [
          "grant_type",
          "client_id",
          "client_secret",
          "scope"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Denotes the flow which shall be used. For the client credentials flow use 'client_credentials'."
          },
          "client_id": {
            "type": "string",
            "description": "The client id to login."
          },
          "client_secret": {
            "type": "string",
            "description": "The secret of the client."
          },
          "scope": {
            "type": "string",
            "description": "Requested scopes for the access request. Sending this parameter without value will lead to a different result compared to not sending it at all. If not sent at all, the authorization server will assume a default value as per https://datatracker.ietf.org/doc/html/rfc6"
          }
        }
      },
      "Token": {
        "required": [
          "access_token",
          "expires_in",
          "refresh_expires_in",
          "refresh_token",
          "scope",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The OpenID Connect Access Token",
            "example": "eyJhbGciOiJSUzI1N....8E5-I8501wgWA9H5xcb9YvLQ"
          },
          "refresh_token": {
            "type": "string",
            "description": "The OpenID Connect Refresh Token",
            "example": "eyJhbGciOiJIUzI....eXrCfAW8BA4cObM7aBVR7A"
          },
          "expires_in": {
            "type": "integer",
            "description": "Lifetime of the Access Token (in seconds).",
            "example": 300
          },
          "refresh_expires_in": {
            "type": "integer",
            "description": "Lifetime of the Refresh Token (in seconds).",
            "example": 1800
          },
          "token_type": {
            "type": "string",
            "example": "bearer"
          },
          "scope": {
            "type": "string",
            "description": "OpenID Connect scopes.",
            "example": "tenant email profile macma_permissions"
          }
        }
      },
      "SCSInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "vendor",
          "version",
          "baseUrl"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the application ID from MACMA.",
            "example": "macma"
          },
          "authProviderClientId": {
            "type": "string",
            "description": "Used to provide the MACMA ClientId if it's different from the \"id\".",
            "example": "macma"
          },
          "name": {
            "type": "string",
            "description": "Name of the module.",
            "example": "Multitenant Access Control"
          },
          "vendor": {
            "type": "string",
            "description": "Information of the vendor.",
            "example": "BCI"
          },
          "version": {
            "type": "string",
            "description": "Module version.",
            "example": "1.20.0-2024-04-05T05:54:03.251Z"
          },
          "baseUrl": {
            "type": "string",
            "description": "Base URL under which the system is exposed.",
            "example": "foundation-11.devspace.bosch-nexeed.com/iam/"
          },
          "supportedLanguages": {
            "type": "array",
            "description": "List of the supported languages.",
            "items": {
              "type": "string"
            },
            "example": [
              "en",
              "de"
            ]
          }
        }
      },
      "SCSView": {
        "type": "object",
        "required": [
          "title",
          "resourceId",
          "resourceType",
          "htmlFile",
          "navigationPath",
          "navigationRoute"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the view.",
            "example": "/users?tenant=##tenantId##"
          },
          "resourceId": {
            "type": "string",
            "description": "Related resource id which was configured in MACMA to assign ACL in order to restrict the visibility of the view to certain users.",
            "example": "$all.users"
          },
          "resourceType": {
            "type": "string",
            "description": "Resource type of the related MACMA configuration.",
            "example": "urn:com:bosch:bci:macma:entity:users"
          },
          "navigationPriority": {
            "type": "integer",
            "description": "A number that can be assigned to a menu item that controls the ordering of menu items.",
            "example": 1
          },
          "navigationPath": {
            "type": "string",
            "description": "Path where the menu entry of the view is displayed in the Web Portal navigation.",
            "items": {
              "type": "string"
            },
            "example": [
              "user-management",
              "users"
            ]
          },
          "navigationRoute": {
            "type": "string",
            "description": "Route to open the corresponding view.",
            "example": "/#/users"
          },
          "localization": {
            "type": "object",
            "description": "Provide further translations for properties on the same level e.g. title."
          },
          "htmlFile": {
            "type": "string",
            "description": "Absolute or relative URL to HTML file or application route that will be loaded in the Web Portal iframe.",
            "example": "/users?tenant=##tenantId##"
          },
          "cssFiles": {
            "type": "array",
            "description": "Absolute or relative URL to css file or application route that will be loaded in the Web Portal iframe.",
            "items": {
              "type": "string"
            }
          },
          "jsFiles": {
            "type": "array",
            "description": "Absolute or relative URL to js file or application route that will be loaded in the Web Portal iframe.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SCSDoc": {
        "type": "object",
        "required": [
          "title",
          "type",
          "format",
          "url",
          "language"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the document.",
            "example": "API Documentation"
          },
          "resourceId": {
            "type": "string",
            "description": "Related resource id which was configured in MACMA to assign ACL in order to restrict the visibility of the document to certain users.",
            "example": "$all.public-documents"
          },
          "resourceType": {
            "type": "string",
            "description": "Resource type of the related MACMA configuration.",
            "example": "urn:com:bosch:bci:macma:entity:public-documents"
          },
          "type": {
            "type": "string",
            "description": "Type of the document.",
            "example": "api-documentation"
          },
          "format": {
            "type": "string",
            "description": "Document format.",
            "example": "html"
          },
          "url": {
            "type": "string",
            "description": "URL to access/download the related document.",
            "example": "doc/api/public-api.yaml"
          },
          "language": {
            "type": "string",
            "description": "Document language in ISO 639-1 two letter codes.",
            "example": "en"
          }
        }
      },
      "SCSViews": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SCSView"
            }
          }
        }
      },
      "SCSDocs": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SCSDoc"
            }
          }
        }
      },
      "SCSRegistrationRequest": {
        "type": "object",
        "properties": {
          "info": {
            "$ref": "#/components/schemas/SCSInfo"
          },
          "views": {
            "$ref": "#/components/schemas/SCSViews"
          },
          "documents": {
            "$ref": "#/components/schemas/SCSDocs"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request is invalid. Details are provided in the message body.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "message": "Invalid content. Object has missing required properties ([{property1},{property2}])"
              }
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Forbidden.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "message": "Forbidden"
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "There is an error in the request processing.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "message": "Internal Server Error"
              }
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service is not ready to handle the request. Please try again.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "message": "Service Unavailable. Try again."
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "No handler found for request, might be caused by unsupported media type or the specified entity cannot be found.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "message": "Not Found"
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Invalid authentication. For more details see WWW-Authenticate Response Header Field (https://datatracker.ietf.org/doc/html/rfc6750#section-3)\n"
      },
      "UnprocessableEntityError": {
        "description": "The request contains semantic issues, e.g. referenced resources do not exist. Details are provided in the message body.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": {
                "message": "Referenced location not found."
              }
            }
          }
        }
      },
      "NamingConflictError": {
        "description": "The request causes a conflict.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "applicationConflict": {
                "value": {
                  "error": {
                    "message": "Application's name or displayName causes conflict.",
                    "path": "/application-management/v1/tenants/7311ea8c-5d48-43fe-acf9-980eedf24b6c/applications"
                  }
                }
              },
              "userConflict": {
                "value": {
                  "error": {
                    "message": "User exists with same username",
                    "path": "/user-management/v1/tenants/7311ea8c-5d48-43fe-acf9-980eedf24b6c/users"
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseOK": {
        "description": "Response for bulk API calls where each element in the Bulk Request was processed with an OK status. The response contains an entry for every item passed via the bulk API. The overall http status code is 200.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "responses"
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 200
                    },
                    {
                      "status": 200
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseCreated": {
        "description": "Response for bulk API calls where each element in the Bulk Request was processed with a CREATED status. The response contains an entry for every item passed via the bulk API. The overall http status code is 201.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "responses"
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 201
                    },
                    {
                      "status": 201
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseMultiStatus": {
        "description": "Response for bulk API calls. The response contains an entry for every item passed via the bulk API. The overall http status code may always be 200 or 207 independent of individual result statuses, unless the request itself is invalid, unauthorized or similar cases. 422 may also indicate partial success.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "responses"
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 200
                    },
                    {
                      "status": 400
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseUnprocessableEntity": {
        "description": "Response for bulk API calls. The response contains an entry for every item passed via the bulk API. The request contains semantic issues, e.g. referenced resources do not exist. Details are provided in the item error body.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "responses"
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 422
                    },
                    {
                      "status": 422
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseBadRequest": {
        "description": "A response that can be returned in two cases:\n<li>The request is invalid. Details are provided in the message body.</li>\n<li>Response for bulk API calls where each element in the Bulk Request was processed with a BAD_REQUEST status. The response contains an entry for every item passed via the bulk API. The overall http status code is 400.</li>\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "required": [
                    "responses"
                  ]
                },
                {
                  "required": [
                    "error"
                  ]
                }
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 400
                    },
                    {
                      "status": 400
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseNotFound": {
        "description": "Response for bulk API calls where each element in the Bulk Request was processed with a NOT_FOUND status. The response contains an entry for every item passed via the bulk API. The overall http status code is 404.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "required": [
                    "responses"
                  ]
                },
                {
                  "required": [
                    "error"
                  ]
                }
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 404
                    },
                    {
                      "status": 404
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseInternalServerError": {
        "description": "Response for bulk API calls where each element in the Bulk Request was processed with an INTERNAL_SERVER_ERROR status. The response contains an entry for every item passed via the bulk API. The overall http status code is 500.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "required": [
                    "responses"
                  ]
                },
                {
                  "required": [
                    "error"
                  ]
                }
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 500
                    },
                    {
                      "status": 500
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkResponseConflict": {
        "description": "Response for bulk API calls where each element in the Bulk Request was processed with an CONFLICT status. The response contains an entry for every item passed via the bulk API. The overall http status code is 409.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "required": [
                    "responses"
                  ]
                },
                {
                  "required": [
                    "error"
                  ]
                }
              ],
              "type": "object",
              "properties": {
                "responses": {
                  "type": "array",
                  "example": [
                    {
                      "status": 409
                    },
                    {
                      "status": 409
                    }
                  ],
                  "items": {
                    "required": [
                      "status"
                    ],
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "number",
                        "description": "The HTTP status code for the passed element."
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "The body depends on the HTTP status code and can be a hint with e.g. an error message."
                      }
                    }
                  }
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "tenantId": {
        "name": "tenantId",
        "in": "path",
        "description": "Id of the tenant on whose behalf you are acting ((normally) your own tenant).",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "21b54338-6cf2-441b-b6b5-371f1a0a304b"
        }
      }
    },
    "securitySchemes": {
      "macma": {
        "type": "oauth2",
        "description": "This API can be accessed with a Bearer token, which is retrieved via client_credentials flow, specified in [OAuth2 RFC](https://tools.ietf.org/html/rfc6749).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/auth/realms/_tenantId_/protocol/openid-connect/auth",
            "tokenUrl": "/access-management/v1/tenants/_tenantId_/openid-connect/token",
            "scopes": {}
          },
          "clientCredentials": {
            "tokenUrl": "/access-management/v1/tenants/_tenantId_/openid-connect/token",
            "scopes": {}
          }
        }
      },
      "basicAuthOauth2": {
        "type": "http",
        "scheme": "basic",
        "description": "HTTP Basic Authentication scheme with additional url encoding of client id and client secret as per https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1"
      }
    }
  },
  "x-test-setup": {
    "placeholders": {
      "tenantId": "7311ea8c-5d48-43fe-acf9-980eedf24b6c",
      "userId": "user42",
      "groupId": "group42",
      "applicationId": "application42",
      "roleId": "role42"
    }
  },
  "tags": [
    {
      "name": "Access Management",
      "description": "APIs for access management"
    },
    {
      "name": "Application Management",
      "description": "APIs for application management"
    },
    {
      "name": "Application Management Bulk",
      "description": "APIs for application management bulk operations"
    },
    {
      "name": "Dynamic Resource",
      "description": "APIs for managing dynamic resources"
    },
    {
      "name": "Management",
      "description": "APIs for operations"
    },
    {
      "name": "Static Resource",
      "description": "APIs for managing static resources"
    },
    {
      "name": "Tenants",
      "description": "APIs for tenant infos"
    },
    {
      "name": "Users",
      "description": "APIs for user data handling"
    }
  ]
}